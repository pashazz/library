keycloak.cors=true
# Realm
keycloak.realm=demo
# Client ID
keycloak.resource=library
keycloak.ssl-required=external
# Client: public (default, false -> the client is confidential)
keycloak.public-client=false
keycloak.principal-attribute=preferred_username
# Use ./standalone.sh -Djboss.socket.binding.port-offset=100 to start Keycloak
keycloak.auth-server-url=http://localhost:8180/auth
keycloak.credentials.secret =58bd0270-992e-4f8e-ad24-67930d8b0cc0


keycloak.securityConstraints[0].authRoles[0] = ROLE_Member
keycloak.securityConstraints[0].securityCollections[0].name = unprotected
keycloak.securityConstraints[0].securityCollections[0].patterns[0] = /*
#keycloak.securityConstraints[0].securityCollections[0].patterns[1] = /books
keycloak.securityConstraints[1].authRoles[0] = ROLE_Librarian
keycloak.securityConstraints[1].securityCollections[0].name = unprotected
keycloak.securityConstraints[1].securityCollections[0].patterns[0] = /*

#keycloak.policy-enforcer-config.enforcement-mode=PERMISSIVE
# This line enables the authorization context: it is crucial
keycloak.policy-enforcer-config.on-deny-redirect-to=/

logging.level.org.apache.http=DEBUG



## default connection pool
spring.datasource.hikari.connectionTimeout=20000
spring.datasource.hikari.maximumPoolSize=5

## PostgreSQL
spring.datasource.url=jdbc:postgresql://localhost:5432/library
spring.datasource.username=library
spring.datasource.password=library

#drop n create table again, good for testing, comment this in production
spring.jpa.hibernate.ddl-auto=create